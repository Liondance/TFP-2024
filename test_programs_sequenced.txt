[ -- Base Program
        
        <Z -> Z> chs := <Z> x -> minus(0)(x);
        <Z -> (Z -> Z)> plus := (<Z> x -> (<Z> y -> minus(x)(chs(y))));
        <Z> x := 7;
        <Z> y := 8;
        <Z> q := plus(x)(y);
        .show("q ==> ",q);                        -- imprime: q ==> 15
        <lazy Z> z := 'plus(x)(y)';
        .show("z ==> ",z);                        -- imprime: z ==> 15
        x := plus(x)(1);
        .show("q ==> ",q);                        -- imprime: q ==> 15
        .show("z ==> ",z);                        -- imprime: z ==> 16
]


[ -- Zilly little program
  <(Z -> Z) -> Z> apply := <Z->Z> f -> <Z> x -> f(x);
  <Z -> Z>        chs   := <Z> x -> minus(0)(x);
  <Z -> Z -> Z>   plus  := <Z> x -> <Z> y -> minus(x)(chs(y));
  -- inline comment
  <Z>             zero  := 0;
  <Z>             one   := plus(1)(zero);
  <Z>             oneP  := plus(zero)(1); 
  <Z>             onePP := apply(apply(plus)(1))(0);
  <Z -> lazy Z>   oneL  := <Z> x -> formula(x);
  .show("apply ==> ", apply);
  .show("chs ==> ", chs);
  .show("plus ==> ", plus);
  .show("zero ==> ", zero);
  .show("one ==> ", one);
  .show("oneP ==> ", oneP);
  .show("onePP ==> ", onePP);
  .show("formula apply ==>",formula(apply));
  .show("formula chs ==>",formula(chs));
  .show("formula plus ==>",formula(plus));
  .show("formula zero ==>",formula(zero));
  .show("formula one ==>",formula(one));
  .show("formula oneP ==>",formula(oneP));
  .show("formula onePP ==>",formula(onePP));
  .show("formula oneL ==>",formula(oneL));
]


[ -- Interesting cases
  Z a := 5;
  Z b := 1;
  <lazy Z -> lazy Z> id  := <lazy Z> x -> formula(x)

  f   := Z a -> Z b -> f -> h

]